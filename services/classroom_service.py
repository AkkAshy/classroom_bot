from googleapiclient.discovery import build
from services.google_auth import get_credentials  # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from googleapiclient.errors import HttpError
from .google_auth import get_credentials  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
import asyncio
import logging


logger = logging.getLogger(__name__)  # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä

async def get_classroom_service(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å Google Classroom —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    creds = await get_credentials(user_id=user_id)
    if not creds:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞!")
        return None

    for attempt in range(3):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ 3 —Ä–∞–∑–∞
        try:
            creds, _ = await get_credentials(user_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º auth_url
            service = build("classroom", "v1", credentials=creds)  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Classroom API —É—Å–ø–µ—à–Ω–æ!")
            return service
        except HttpError as error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {error}")
            await asyncio.sleep(2)  # –î–∞–µ–º API –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    logger.critical("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Classroom API –Ω–µ —É–¥–∞–ª–∏—Å—å.")
    return None

async def list_courses(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    service = await get_classroom_service(user_id=user_id)
    if not service:
        return []

    loop = asyncio.get_running_loop()
    response = await loop.run_in_executor(None, lambda: service.courses().list().execute())
    
    return response.get("courses", [])


async def add_material_to_course(user_id, course_id: str, title: str, description: str, attachment: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫—É—Ä—Å Google Classroom."""
    service = await get_classroom_service(user_id=user_id)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å await

    if not service:
        return False

    announcement = {
        "courseId": course_id,
        "text": f"{title}\n\n{description}" if description else title,
    }

    if attachment:
        announcement["materials"] = [{"link": {"url": attachment}}]

    try:
        service.courses().announcements().create(courseId=course_id, body=announcement).execute()  # –£–±—Ä–∞–ª await
        return True
    except HttpError as error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {error}")
        return False


    

async def create_course(name, user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –≤ Google Classroom"""
    creds = get_credentials(user_id=user_id)  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ get_credentials() –ù–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è!
    
    if not creds:
        return False  # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    try:
        service = build("classroom", "v1", credentials=creds)

        course_data = {
            "name": name,
            "ownerId": "me",
            "courseState": "ACTIVE"
        }

        course = service.courses().create(body=course_data).execute()
        return course  # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    except HttpError as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: {error}")
        return False



async def get_course_materials(course_id, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞ (–æ–±—ä—è–≤–ª–µ–Ω–∏–π)"""
    service = await get_classroom_service(user_id=user_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
        response = service.courses().courseWorkMaterials().list(courseId=course_id).execute()
        print(response)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ materials —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ
        materials = response.get("courseWorkMaterials", [])
        if not materials:
            print(f"–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞ —Å ID {course_id}")
            return []

        result = []  # –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

        for material in materials:
            material_info = {}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ title (–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
            if 'title' in material:
                material_info["title"] = material['title']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ description (–æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
            if 'description' in material:
                material_info["description"] = material['description']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π (materials, attachments –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π)
            if 'materials' in material:  # API Google –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'materials', –∞ –Ω–µ 'attachments'
                files = []
                for attachment in material['materials']:
                    if 'driveFile' in attachment:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'driveFile'
                        file_info = attachment['driveFile']
                        files.append({
                            "title": file_info.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                            "file_id": file_info.get("id")  # ID —Ñ–∞–π–ª–∞
                        })
                if files:
                    material_info["attachments"] = files  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É

            result.append(material_info)  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å–ø–∏—Å–æ–∫

        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ


