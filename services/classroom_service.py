from googleapiclient.discovery import build
from services.google_auth import get_credentials  # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from googleapiclient.errors import HttpError
import pickle
import os
import asyncio
import logging

TOKEN_DIR = "tokens"

logger = logging.getLogger(__name__)  # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä


def get_stored_credentials(user_id):
    token_file = f"{TOKEN_DIR}/{user_id}.pickle"

    if not os.path.exists(token_file):
        return None  # –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

    with open(token_file, "rb") as token:
        creds = pickle.load(token)

    return creds

async def get_classroom_service(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–∏—Å Google Classroom —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    creds = await get_credentials(user_id=user_id)
    if not creds:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞!")
        return None

    for attempt in range(3):  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏ 3 —Ä–∞–∑–∞
        try:
            creds, _ = await get_credentials(user_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º auth_url
            service = build("classroom", "v1", credentials=creds)  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Classroom API —É—Å–ø–µ—à–Ω–æ!")
            return service
        except HttpError as error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {error}")
            await asyncio.sleep(2)  # –î–∞–µ–º API –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    logger.critical("üö® –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Classroom API –Ω–µ —É–¥–∞–ª–∏—Å—å.")
    return None

async def list_courses(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–∏—Å–∞–Ω —É—á–µ–Ω–∏–∫"""
    creds = get_stored_credentials(user_id)
    if not creds:
        print(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.")
        return []  

    service = build("classroom", "v1", credentials=creds)

    try:
        response = service.courses().list().execute()
        courses = response.get("courses", [])

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏)
        print(f"üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –¥–ª—è {user_id}: {courses}")

        return [{"id": c["id"], "name": c["name"]} for c in courses]
    
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –¥–ª—è {user_id}: {e}")
        return []




async def add_material_to_course(user_id, course_id: str, title: str, description: str, attachment: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –∫—É—Ä—Å Google Classroom."""
    service = await get_classroom_service(user_id=user_id)  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å await

    if not service:
        return False

    announcement = {
        "courseId": course_id,
        "text": f"{title}\n\n{description}" if description else title,
    }

    if attachment:
        announcement["materials"] = [{"link": {"url": attachment}}]

    try:
        service.courses().announcements().create(courseId=course_id, body=announcement).execute()  # –£–±—Ä–∞–ª await
        return True
    except HttpError as error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {error}")
        return False


    

async def create_course(name, user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –≤ Google Classroom"""
    creds = get_credentials(user_id=user_id)  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ get_credentials() –ù–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è!
    
    if not creds:
        return False  # –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    try:
        service = build("classroom", "v1", credentials=creds)

        course_data = {
            "name": name,
            "ownerId": "me",
            "courseState": "ACTIVE"
        }

        course = service.courses().create(body=course_data).execute()
        return course  # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    except HttpError as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞: {error}")
        return False



async def get_course_materials(course_id, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞"""
    creds = get_stored_credentials(user_id)
    if not creds:
        return []  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    service = build("classroom", "v1", credentials=creds)

    try:
        response = service.courses().courseWork().list(courseId=course_id).execute()
        materials = response.get("courseWork", [])

        if not materials:
            print(f"‚ùå –í –∫—É—Ä—Å–µ {course_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
            return []

        result = []

        for material in materials:
            item = {
                "title": material["title"],
                "description": material.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                "attachments": []
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            if "materials" in material:
                for attachment in material["materials"]:
                    if "driveFile" in attachment:
                        file_info = attachment["driveFile"]
                        item["attachments"].append({
                            "title": file_info["title"],
                            "file_id": file_info["id"]
                        })
                    elif "link" in attachment:
                        item["attachments"].append({
                            "title": "–°—Å—ã–ª–∫–∞",
                            "url": attachment["link"]["url"]
                        })
                    elif "youtubeVideo" in attachment:
                        item["attachments"].append({
                            "title": "YouTube –í–∏–¥–µ–æ",
                            "url": f"https://www.youtube.com/watch?v={attachment['youtubeVideo']['id']}"
                        })

            result.append(item)

        return result
    except HttpError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
        return []



from googleapiclient.discovery import build

def get_email(creds):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google People API"""
    try:
        people_service = build("people", "v1", credentials=creds)
        profile = people_service.people().get(resourceName="people/me", personFields="emailAddresses").execute()

        user_email = profile.get("emailAddresses", [{}])[0].get("value", None)
        if user_email:
            return user_email
        else:
            return "‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email: {e}"


async def enroll_user_to_course(user_id, course_id):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—É—Ä—Å –ø–æ –µ–≥–æ user_id –∏ course_id"""
    creds = get_stored_credentials(user_id) 
     
    if not creds:
        return {"success": False, "error": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."}

    service = build("classroom", "v1", credentials=creds)

    try:
        response = service.userProfiles().get(userId="me").execute()
        print("Google API Response:", response)  # –í—ã–≤–µ–¥–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API

        user_email = get_email(creds)
        # response.get("emailAddress", None) 
        # if not user_email:
        #     return {"success": False, "error": "‚ùå Google API –Ω–µ –≤–µ—Ä–Ω—É–ª emailAddress. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è."}

        user_email = service.userProfiles().get(userId="me").execute()["emailAddress"]

        enrollment = {
            "userId": user_email  # Google Classroom —Ç—Ä–µ–±—É–µ—Ç email, –∞ –Ω–µ user_id
        }

        service.courses().students().create(courseId=course_id, body=enrollment).execute()
        return {"success": True, "message": "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫—É—Ä—Å!"}
    
    except HttpError as e:
        error_message = str(e)
        if "409" in error_message:
            return {"success": False, "error": "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç—Ç–æ—Ç –∫—É—Ä—Å."}
        elif "403" in error_message:
            return {"success": False, "error": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫—É—Ä—Å."}
        elif "404" in error_message:
            return {"success": False, "error": "‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∫—É—Ä—Å–∞."}
        else:
            return {"success": False, "error": f"‚ùå –û—à–∏–±–∫–∞: {error_message}"}
