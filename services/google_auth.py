# import os
# import pickle
# import logging

# import aiohttp
# import aiohttp.web as web

# from google.auth.transport.requests import Request
# from google.oauth2.credentials import Credentials
# from google_auth_oauthlib.flow import InstalledAppFlow

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# SCOPES = [
#     "https://www.googleapis.com/auth/classroom.courses",
#     "https://www.googleapis.com/auth/classroom.coursework.students",
#     "https://www.googleapis.com/auth/classroom.coursework.me",
#     "https://www.googleapis.com/auth/classroom.announcements",
#     "https://www.googleapis.com/auth/classroom.rosters",
#     "https://www.googleapis.com/auth/classroom.courses.readonly",
#     "https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly"
# ]
# TOKEN_DIR = "tokens"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
# CREDENTIALS_PATH = "services/credentials.json"  # –§–∞–π–ª —Å Google API –∫–ª—é—á–∞–º–∏

# # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
# if not os.path.exists(TOKEN_DIR):
#     os.makedirs(TOKEN_DIR)

# def get_token_path(user_id):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ç–æ–∫–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     return os.path.join(TOKEN_DIR, f"{user_id}.pickle")

# async def handle_auth_request(request):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."""
#     user_id = request.query.get("user_id")
#     if not user_id:
#         return web.json_response({"error": "user_id is required"}, status=400)

#     creds, auth_url = get_credentials(user_id)

#     if auth_url:
#         return web.json_response({"auth_url": auth_url})
#     else:
#         return web.json_response({"error": "Failed to generate auth URL"}, status=500)


# def get_credentials(user_id):
#     """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google API –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
#     logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")

#     creds = None  # –•—Ä–∞–Ω–∏–º –æ–±—ä–µ–∫—Ç Credentials
#     auth_url = None  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
#     token_path = get_token_path(user_id)  # –ü—É—Ç—å –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
#     if os.path.exists(token_path):
#         logging.info(f"üìÇ –ù–∞–π–¥–µ–Ω {token_path}, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
#         with open(token_path, 'rb') as token:
#             try:
#                 creds = pickle.load(token)
#                 if not isinstance(creds, Credentials):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
#                     logging.error("‚ùå –û—à–∏–±–∫–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Credentials.")
#                     creds = None  # –û–±–Ω—É–ª—è–µ–º, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
#             except Exception as e:
#                 logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
#                 creds = None  # –û–±–Ω—É–ª—è–µ–º, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
#     if not creds or not creds.valid:
#         if creds and creds.expired and creds.refresh_token:
#             logging.info("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...")
#             creds.refresh(Request())
#         else:
#             if not os.path.exists(CREDENTIALS_PATH):
#                 logging.error(f"‚ùå –û—à–∏–±–∫–∞! –§–∞–π–ª {CREDENTIALS_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#                 return None, None  # –í–µ—Ä–Ω—ë–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏

#             logging.info("üîë –ù–æ–≤—ã–π –≤—Ö–æ–¥. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
#             flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_PATH, SCOPES)
#             auth_url, _ = flow.authorization_url(prompt="consent")  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å

#             creds = flow.run_local_server(port=8080, open_browser=True) 
#             print("DEBUG: –ñ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...") # –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
#         if creds and isinstance(creds, Credentials):
#             logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ {token_path}...")
#             with open(token_path, 'wb') as token_file:
#                 pickle.dump(creds, token_file)
#             logging.info("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
#     print(auth_url, "DEBUG: auth_url from get_credentials")
#     return creds, auth_url  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç Credentials –∏ —Å—Å—ã–ª–∫—É

# def get_url(user_id):
#     print(get_credentials(user_id=user_id))

# if __name__ == "__main__":
#     auth_url = get_credentials()
#     if auth_url:
#         logging.info("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
#     else:
#         logging.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")


import os
import pickle
import logging
from aiohttp import web
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
CLIENT_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")



SCOPES = [
    "https://www.googleapis.com/auth/classroom.courses",
    "https://www.googleapis.com/auth/userinfo.profile",
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/classroom.coursework.students",
    "https://www.googleapis.com/auth/classroom.coursework.me",
    "https://www.googleapis.com/auth/classroom.announcements",
    "https://www.googleapis.com/auth/classroom.rosters",
    "https://www.googleapis.com/auth/classroom.courses.readonly",
    "https://www.googleapis.com/auth/classroom.courseworkmaterials.readonly",
    "https://www.googleapis.com/auth/forms.body",
    "openid"
]

TOKEN_DIR = "tokens"
# CREDENTIALS_PATH = "services/credentials.json"

if not os.path.exists(TOKEN_DIR):
    os.makedirs(TOKEN_DIR)

def get_token_path(user_id):
    """–ü—É—Ç—å –∫ —Ç–æ–∫–µ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return os.path.join(TOKEN_DIR, f"{user_id}.pickle")



async def get_credentials(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
    logging.info(f"üöÄ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {user_id}...")
    creds = None
    auth_url = None
    token_path = get_token_path(user_id)

    if os.path.exists(token_path):
        with open(token_path, 'rb') as token:
            try:
                creds = pickle.load(token)
                if not isinstance(creds, Credentials):
                    creds = None
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                creds = None

    if not creds or not creds.valid:
        if creds and creds.expired:
            if creds.refresh_token:
                logging.info("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                creds.refresh(Request())
            else:
                logging.error("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω.")
                creds = None

        if creds is None:
            if not CLIENT_ID or not CLIENT_SECRET:
                logging.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.")
                return None, None
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—Ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            logging.info("üîë –ù–æ–≤—ã–π –≤—Ö–æ–¥. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É...")
            flow = InstalledAppFlow.from_client_config(
                {
                    "web": {
                        "client_id": CLIENT_ID,
                        "client_secret": CLIENT_SECRET,
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "token_uri": "https://oauth2.googleapis.com/token",
                        "redirect_uris": ["https://classroom-bot-7wn6.onrender.com/oauth_callback"]
                    }
                },
                SCOPES,
            )
            flow.redirect_uri = "https://classroom-bot-7wn6.onrender.com/oauth_callback"
            logging.info(f"Flow config: {flow}")
            logging.info(f"Redirect URI: {flow.redirect_uri}")

            auth_url, _ = flow.authorization_url(prompt="consent", state=user_id)
            print(auth_url, "DEBUG: auth_url from get_credentials")

    if creds and creds.valid:
        with open(token_path, 'wb') as token:
            pickle.dump(creds, token)
            logging.info(f"‚úîÔ∏è –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {token_path}")
    
    return creds, auth_url


# async def get_credentials(user_id):
#     """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞."""
#     logging.info(f"üöÄ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {user_id}...")
#     creds = None
#     auth_url = None
#     token_path = get_token_path(user_id)

#     if os.path.exists(token_path):
#         with open(token_path, 'rb') as token:
#             try:
#                 creds = pickle.load(token)
#                 if not isinstance(creds, Credentials):
#                     creds = None
#             except Exception as e:
#                 logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
#                 creds = None

#     if not creds or not creds.valid:
#         if creds and creds.expired:
#             if creds.refresh_token:
#                 logging.info("üîÑ –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...")
#                 creds.refresh(Request())
#             else:
#                 logging.error("‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω.")
#                 creds = None

#         if creds is None:
#             if not os.path.exists(CREDENTIALS_PATH):
#                 logging.error(f"‚ùå –§–∞–π–ª {CREDENTIALS_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#                 return None, None
            
#             logging.info("üîë –ù–æ–≤—ã–π –≤—Ö–æ–¥. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É...")
#             flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_PATH, SCOPES)
#             flow.redirect_uri = "http://localhost:8080/oauth_callback"
#             auth_url, _ = flow.authorization_url(prompt="consent", state=user_id)
    
#     return creds, auth_url

async def handle_auth_request(request):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."""
    user_id = request.query.get("user_id")
    if not user_id:
        return web.json_response({"error": "user_id is required"}, status=400)
    
    _, auth_url = await get_credentials(user_id)
    if auth_url:
        return web.json_response({"auth_url": auth_url})
    else:
        return web.json_response({"error": "Failed to generate auth URL"}, status=500)

async def handle_oauth_callback(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Google OAuth callback."""
    user_id = request.query.get("state")
    code = request.query.get("code")
    if not user_id or not code:
        return web.json_response({"error": "Missing user_id or code"}, status=400)
    
    flow = InstalledAppFlow.from_client_config(
                {
                    "web": {
                        "client_id": CLIENT_ID,
                        "client_secret": CLIENT_SECRET,
                        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                        "token_uri": "https://oauth2.googleapis.com/token",
                        "redirect_uris": ["https://classroom-bot-7wn6.onrender.com/oauth_callback"]
                    }
                },
                SCOPES,
            )
    flow.redirect_uri = "https://classroom-bot-7wn6.onrender.com/oauth_callback"

    try:
        flow.fetch_token(code=code)
        creds = flow.credentials

        token_path = get_token_path(user_id)
        with open(token_path, 'wb') as token_file:
            pickle.dump(creds, token_file)

        return web.json_response({"message": "Authorization successful!"})

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return web.json_response({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}"}, status=500)

def get_url(user_id):

    return f"https://classroom-bot-7wn6.onrender.com/auth?user_id={user_id}"

