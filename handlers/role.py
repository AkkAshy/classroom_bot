from aiogram import Router, types, F
from aiogram.filters import Command
import logging
from keyboards.role_keyboard import role_keyboard # ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
from handlers.teacher import teacher_menu
from handlers.student import student_menu
from services.google_auth import get_credentials
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
logging.basicConfig(level=logging.INFO)

user_roles = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

@router.message(Command("start"))
async def start_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏"""
    creds, auth_url = get_credentials()  # üî• –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    if auth_url:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        auth_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîó –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", url=auth_url)]
            ]
        )
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å, –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=auth_keyboard
        )
    else:
        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=role_keyboard())
        # Now you can access creds here
        creds = creds  # or do something with creds
# @router.message(Command("start"))
# async def start_command(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏"""
#     creds, auth_url = get_credentials()  # üî• –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
#     if auth_url:
#         # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
#         auth_keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="üîó –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google", url=auth_url)]
#             ]
#         )
#         await message.answer(
#             "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å, –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
#             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=auth_keyboard
#         )
#     else:
#         # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
#         await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:", reply_markup=role_keyboard())


@router.callback_query(F.data == "role_teacher")
async def teacher_handler(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –£—á–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è"""
    user_roles[callback.from_user.id] = "teacher"
    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: –£—á–∏—Ç–µ–ª—å")

    
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å.")
    await callback.message.answer("üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è:", reply_markup=teacher_menu())

@router.callback_query(F.data == "role_student")
async def student_handler(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–æ–ª—å –£—á–µ–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞"""
    user_roles[callback.from_user.id] = "student"
    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: –£—á–µ–Ω–∏–∫")
    
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üéì –£—á–µ–Ω–∏–∫.")
    await callback.message.answer("üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞:", reply_markup=student_menu())
