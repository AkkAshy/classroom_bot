from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.classroom_service import add_material_to_course, list_courses, create_course # –§—É–Ω–∫—Ü–∏–∏ API Classroom
from services.google_auth import get_credentials  # –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from keyboards.role_keyboard import user_roles


router = Router()

class MaterialState(StatesGroup):
    waiting_for_course = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_attachment = State()
    waiting_for_text = State()
    waiting_for_course_name = State()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è
def teacher_menu():
    buttons = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")],
        [KeyboardButton(text="üìö –ú–æ–∏ –∫—É—Ä—Å—ã")],
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å")],
        [KeyboardButton(text="üîô –í—ã–π—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —É—á–∏—Ç–µ–ª—è
@router.callback_query(F.data == "role_teacher")
async def teacher_handler(callback: types.CallbackQuery):
    user_roles[callback.from_user.id] = "teacher"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    await callback.message.answer("üéì –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.", reply_markup=teacher_menu())
    


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
async def start_adding_material(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    courses = await list_courses(user_id=user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤

    if not courses:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    
    buttons = [[KeyboardButton(text=course["name"])] for course in courses]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=markup)
    await state.set_state(MaterialState.waiting_for_course)

@router.message(MaterialState.waiting_for_course)
async def receive_course_selection(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    selected_course = message.text.strip()
    courses = await list_courses(user_id=user_id)
    course_id = next((c["id"] for c in courses if c["name"] == selected_course), None)

    if not course_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(course_id=course_id, user_id=user_id)
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(MaterialState.waiting_for_title)

@router.message(MaterialState.waiting_for_title)
async def receive_material_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    await state.update_data(title=title)
    
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(MaterialState.waiting_for_description)

@router.message(MaterialState.waiting_for_description)
async def receive_material_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    
    await message.answer("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–µ—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(MaterialState.waiting_for_attachment)

@router.message(MaterialState.waiting_for_attachment)
async def receive_material_attachment(message: types.Message, state: FSMContext):
    
    data = await state.get_data()
    user_id = data.get("user_id")
    course_id = data.get("course_id")
    title = data.get("title")
    description = data.get("description")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ–∫—Å—Ç —ç—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª
    if message.text:
        attachment = message.text.strip() if message.text.lower() != "–Ω–µ—Ç" else None
    elif message.document:  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª
        attachment = message.document.file_id
    elif message.photo:  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ
        attachment = message.photo[-1].file_id
    else:
        attachment = None  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

    success = await add_material_to_course(user_id, course_id, title, description, attachment)

    if success:
        await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å!", reply_markup=teacher_menu())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")

    await state.clear()



# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@router.message(MaterialState.waiting_for_course)
async def receive_course_selection(message: types.Message, state: FSMContext):
    selected_course = message.text.strip()
    courses = await list_courses()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—É—Ä—Å
    course_id = next((c["id"] for c in courses if c["name"] == selected_course), None)
    
    if not course_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(course_id=course_id)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await state.set_state(MaterialState.waiting_for_text)

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@router.message(MaterialState.waiting_for_text)
async def receive_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    course_id = data.get("course_id")
    text = message.text.strip()

    if not course_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    success = add_material_to_course(course_id, text)

    if success:
        await message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å!", reply_markup=teacher_menu())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.")

    await state.clear()


@router.message(F.text == "üìö –ú–æ–∏ –∫—É—Ä—Å—ã")  # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
async def show_courses(message: types.Message):
    user_id = message.from_user.id
    courses = await list_courses(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤

    if not courses:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    text = "üìö *–í–∞—à–∏ –∫—É—Ä—Å—ã:*\n\n"
    for course in courses:
        text += f"üìå *{course['name']}*\n"

    await message.answer(text, parse_mode="Markdown")


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å")
async def create_course_start(message: types.Message, state: FSMContext):
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞:")
    await state.set_state(MaterialState.waiting_for_course_name)

@router.message(MaterialState.waiting_for_course_name)
async def create_course_finish(message: types.Message, state: FSMContext):
    course_name = message.text.strip()

    if not course_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    success = await create_course(course_name)

    if success:
        await message.answer(f"‚úÖ –ö—É—Ä—Å *{course_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", parse_mode="Markdown", reply_markup=teacher_menu())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()