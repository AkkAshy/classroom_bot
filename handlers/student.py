
from services.classroom_service import list_courses, get_course_materials
from aiogram import Router, types, F
from services.classroom_service import get_course_materials, list_courses
from services.google_auth import get_credentials
from keyboards.role_keyboard import user_roles

import logging
logging.basicConfig(level=logging.INFO)

router = Router()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞



# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤
# @router.message(F.text == "–ö—É—Ä—Å—ã")
# async def show_student_courses(message: types.Message):
#     courses = await list_courses()
    
#     if not courses:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
#         return
    
#     text = "üìö *–í–∞—à–∏ –∫—É—Ä—Å—ã:*\n\n"
#     for course in courses:
#         text += f"üìå *{course['name']}*\n"

#     await message.answer(text, parse_mode="Markdown")

# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
# @router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
# async def ask_for_course_selection(message: types.Message):
#     courses = await list_courses()

#     if not courses:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
#         return

#     buttons = [[types.KeyboardButton(text=course["name"])] for course in courses]
#     markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

#     await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class StudentStates(StatesGroup):
    selecting_course = State()

def student_menu():
    buttons = [
        [types.KeyboardButton(text="–ö—É—Ä—Å—ã")],
        [types.KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")],
        [types.KeyboardButton(text="üîô –í—ã–π—Ç–∏")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.callback_query(F.data == "role_student")
async def student_handler(callback: types.CallbackQuery):
    user_roles[callback.from_user.id] = "student"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    await callback.message.answer("üéì –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.", reply_markup=student_menu())

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def ask_for_course_selection(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    courses = await list_courses(user_id=user_id)

    if not courses:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    buttons = [[types.KeyboardButton(text=course["name"])] for course in courses]
    markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)
    await state.set_state(StudentStates.selecting_course)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@router.message(StudentStates.selecting_course)
async def show_course_materials(message: types.Message, state: FSMContext):
    selected_course = message.text.strip()
    user_id = message.from_user.id
    courses = await list_courses(user_id=user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    course_id = next((c["id"] for c in courses if c["name"] == selected_course), None)

    if not course_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
    materials = await get_course_materials(course_id, user_id)
    
    if not materials:
        await message.answer("üì≠ –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    text = f"üìñ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ {selected_course}:*\n\n"
    for material in materials:
        print(material)
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        text += f"üîπ *{material['title']}*\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'description' in material:
            text += f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {material['description']}\n"
        
        # –í–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'attachments' in material:
            text += "üìé *–í–ª–æ–∂–µ–Ω–∏—è:*\n"
            for attachment in material['attachments']:
                text += f"  - {attachment['title']} (ID: {attachment['file_id']})\n"
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        text += "\n"

    await message.answer(text, parse_mode="Markdown")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

