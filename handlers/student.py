
from services.classroom_service import list_courses, get_course_materials
from aiogram import Router, types, F
from services.classroom_service import get_course_materials, list_courses, enroll_user_to_course
from services.google_auth import get_credentials
from keyboards.role_keyboard import user_roles
import pickle
import os

from googleapiclient.errors import HttpError



import logging
logging.basicConfig(level=logging.INFO)
TOKEN_DIR = "tokens"
router = Router()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞



# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–æ–≤
# @router.message(F.text == "–ö—É—Ä—Å—ã")
# async def show_student_courses(message: types.Message):
#     courses = await list_courses()
    
#     if not courses:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
#         return
    
#     text = "üìö *–í–∞—à–∏ –∫—É—Ä—Å—ã:*\n\n"
#     for course in courses:
#         text += f"üìå *{course['name']}*\n"

#     await message.answer(text, parse_mode="Markdown")

# # üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
# @router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
# async def ask_for_course_selection(message: types.Message):
#     courses = await list_courses()

#     if not courses:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
#         return

#     buttons = [[types.KeyboardButton(text=course["name"])] for course in courses]
#     markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

#     await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class StudentStates(StatesGroup):
    selecting_course = State()
    entering_course_code = State()
    

def get_stored_credentials(user_id):
    token_file = f"{TOKEN_DIR}/{user_id}.pickle"

    if not os.path.exists(token_file):
        return None  # –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

    with open(token_file, "rb") as token:
        creds = pickle.load(token)

    return creds
def student_menu():
    buttons = [
        [types.KeyboardButton(text="–ö—É—Ä—Å—ã")],
        [types.KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")],
        [types.KeyboardButton(text="üîô –í—ã–π—Ç–∏")],
        [types.KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.callback_query(F.data == "role_student")
async def student_handler(callback: types.CallbackQuery):
    user_roles[callback.from_user.id] = "student"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å
    await callback.message.answer("üéì –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç.", reply_markup=student_menu())

# @router.message(F.text == "–ö—É—Ä—Å—ã")
# async def join_course_prompt(message: types.Message, state: FSMContext):
#     """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É —É—á–µ–Ω–∏–∫–∞ –∫–æ–¥ –∫—É—Ä—Å–∞"""
#     await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")

#     await state.set_state(StudentStates.entering_course_code)



# @router.message(StudentStates.entering_course_code)
# async def join_course(message: types.Message, state: FSMContext):
#     """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∫ –∫—É—Ä—Å—É –ø–æ –∫–æ–¥—É"""
#     user_id = message.from_user.id
#     course_code = message.text.strip()

#     creds = get_stored_credentials(user_id)
#     if not creds:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Google.")
#         await state.clear()
#         return
#     from googleapiclient.discovery import build
#     service = build("classroom", "v1", credentials=creds)

#     try:
#         # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
#         service.courses().students().create(
#             courseId=course_code,
#             body={"userId": "me"}  # "me" ‚Äì —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#         ).execute()

#         await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫—É—Ä—Å—É!")
#     except HttpError as e:
#         if e.resp.status == 403:
#             await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É.")
#         elif e.resp.status == 404:
#             await message.answer("‚ùå –ö–æ–¥ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
#         else:
#             await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {e}")
#     finally:
#         await state.clear()




# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def ask_for_course_selection(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    courses = await list_courses(user_id=user_id)

    if not courses:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
        return

    buttons = [[types.KeyboardButton(text=course["name"])] for course in courses]
    markup = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:", reply_markup=markup)
    await state.set_state(StudentStates.selecting_course)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
@router.message(StudentStates.selecting_course)
async def show_course_materials(message: types.Message, state: FSMContext):
    selected_course = message.text.strip()
    user_id = message.from_user.id
    courses = await list_courses(user_id=user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    course_id = next((c["id"] for c in courses if c["name"] == selected_course), None)

    if not course_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞
    materials = await get_course_materials(course_id, user_id)

    if not materials:
        await message.answer("üì≠ –í —ç—Ç–æ–º –∫—É—Ä—Å–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã —á–∞—Å—Ç—è–º–∏
    text_parts = []
    current_text = f"üìñ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ {selected_course}:*\n\n"

    for material in materials:
        print(material)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        current_text += f"üîπ *{material['title']}*\n"

        # –û–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'description' in material:
            current_text += f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {material['description']}\n"

        # –í–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if material.get('attachments'):
            current_text += "üìé *–í–ª–æ–∂–µ–Ω–∏—è:*\n"
            for attachment in material['attachments']:
                if "file_id" in attachment:
                    current_text += f"  - üìÑ {attachment['title']} (ID: {attachment['file_id']})\n"
                elif "url" in attachment:
                    current_text += f"  - üîó [{attachment['title']}]({attachment['url']})\n"

        current_text += "\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(current_text) > 3500:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            text_parts.append(current_text)
            current_text = ""

    if current_text:
        text_parts.append(current_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for part in text_parts:
        await message.answer(part, parse_mode="Markdown")

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å")
async def ask_for_course_code(message: types.Message, state: FSMContext):
    await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É—Ä—Å–∞:")
    await state.set_state(StudentStates.entering_course_code)

@router.message(StudentStates.entering_course_code)
async def enroll_to_course(message: types.Message, state: FSMContext):
    course_code = message.text.strip()
    user_id = message.from_user.id

    result = await enroll_user_to_course(user_id, course_code)
    
    if result["success"]:
        await message.answer(result["message"])
    else:
        await message.answer(result["error"])

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
