from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiohttp
import json
import logging
import os
import pickle

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage


# from googleapiclient.discovery import build

logging.basicConfig(level=logging.INFO)

router = Router()

TOKEN_DIR = "tokens"
 # Google Apps Script URL

# üìå –°–æ—Å—Ç–æ—è–Ω–∏—è FSM

class TestCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_question = State()
    waiting_for_options = State()
    waiting_for_correct_answer = State()
    waiting_for_next_question = State()


def get_stored_credentials(user_id):
    token_file = f"{TOKEN_DIR}/{user_id}.pickle"

    if not os.path.exists(token_file):
        return None  # –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

    with open(token_file, "rb") as token:
        creds = pickle.load(token)

    return creds

# üìå –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç")
async def start_test_creation(message: types.Message, state: FSMContext):
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:")
    await state.set_state(TestCreation.waiting_for_title)

# üìå –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
@router.message(TestCreation.waiting_for_title)
async def get_test_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text, questions=[])
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(TestCreation.waiting_for_question)

# üìå –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å
@router.message(TestCreation.waiting_for_question)
async def get_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    questions.append({"question": message.text, "options": []})
    
    await state.update_data(questions=questions)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(TestCreation.waiting_for_options)

# üìå –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
@router.message(TestCreation.waiting_for_options)
async def get_options(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    options = [opt.strip() for opt in message.text.split(",")]

    questions[-1]["options"] = options
    await state.update_data(questions=questions)

    await message.answer(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-{len(options)}):")
    await state.set_state(TestCreation.waiting_for_correct_answer)

# üìå –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
@router.message(TestCreation.waiting_for_correct_answer)
async def get_correct_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    text = message.text.strip()

    if text.isdigit():
        answer_index = int(text) - 1
        if 0 <= answer_index < len(questions[-1]["options"]):
            questions[-1]["answer"] = answer_index
            await state.update_data(questions=questions)

            await message.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!\n\n‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? (–î–∞/–ù–µ—Ç)")
            await state.set_state(TestCreation.waiting_for_next_question)
            return  

    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.")

# üìå –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
@router.message(TestCreation.waiting_for_next_question)
async def add_next_question(message: types.Message, state: FSMContext):
    text = message.text.lower()

    if text == "–¥–∞":
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:")
        await state.set_state(TestCreation.waiting_for_question)

    elif text == "–Ω–µ—Ç":
        await finish_test(message, state)

# üìå –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
async def finish_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    test_title = data["title"]
    test_questions = data["questions"]

    await message.answer(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç '{test_title}' –≤ Google Forms...")

    # üî• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    user_id = message.from_user.id
    creds = get_stored_credentials(user_id)

    if not creds:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞! –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google.")
        return
    
    from googleapiclient.discovery import build

    service = build("forms", "v1", credentials=creds)

    # üî• –°–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É
    form = {
        "info": {
            "title": test_title
        }
    }
    result = service.forms().create(body=form).execute()
    form_id = result["formId"]

    # üî• –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
    requests = []
    for q in test_questions:
        question_item = {
            "createItem": {
                "item": {
                    "title": q["question"],
                    "questionItem": {
                        "question": {
                            "choiceQuestion": {
                                "type": "RADIO",
                                "options": [{"value": opt} for opt in q["options"]],
                                "shuffle": False,
                            }
                        }
                    }
                },
                "location": {"index": 0},
            }
        }
        requests.append(question_item)

    # üî• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º—É
    service.forms().batchUpdate(formId=form_id, body={"requests": requests}).execute()

    # üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    form_url = f"https://docs.google.com/forms/d/{form_id}/edit"
    await message.answer(f"‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {form_url}")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()