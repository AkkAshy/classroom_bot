import logging
import os
import asyncio
from aiogram import Bot, Dispatcher
<<<<<<< HEAD
from handlers import start, cources, role, teacher, student
=======

from handlers import start, cources, role, teacher, student, test_creator
>>>>>>> 4a93b39 (–û–±–Ω–æ–≤–∏–ª —Ñ–∞–π–ª—ã: –∏—Å–ø—Ä–∞–≤–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ email —á–µ—Ä–µ–∑ People API)
from server import start_server  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
import tracemalloc
from dotenv import load_dotenv


load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not os.path.exists("logs"):
    os.makedirs("logs")


logging.basicConfig(
    level=logging.DEBUG,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)


logging.info("üöÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ! –í—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–∏—à—É—Ç—Å—è –≤ logs/bot.log")

tracemalloc.start()
logging.basicConfig(level=logging.DEBUG)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

dp.include_router(start.router)
dp.include_router(student.router)
dp.include_router(cources.router)
dp.include_router(role.router)
dp.include_router(teacher.router)
dp.include_router(test_creator.router)

async def main():
    """–ó–∞–ø—É—Å–∫ –∏ –±–æ—Ç–∞, –∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await asyncio.sleep(2) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp-—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –±–æ—Ç–æ–º
    server_task = asyncio.create_task(start_server())
    bot_task = asyncio.create_task(dp.start_polling(bot))

    await asyncio.gather(server_task, bot_task)  # –û–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (Ctrl+C).")
